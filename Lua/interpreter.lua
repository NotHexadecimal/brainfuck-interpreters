---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by rm.
--- DateTime: 26/09/20 21:30
---
local v, p, add, out, input
do
    local values, pointer = {}, 0
    setmetatable(values, {__index = function() return 0 end})
    function v() return values[pointer] end
    function p(val) pointer = pointer + val end
    function add(val) values[pointer] = (values[pointer] + val) % 256 end
    function out() io.write(string.char(v())); io.flush() end
    function input() values[pointer] = string.byte(io.read(1)) end
end


local function read_brainfuckery() --reads the whole code and passes it to the caller as a string
    if arg[1] then
        local file = io.open(arg[1])
        if file then return file:read("*a")
        else
            io.write(string.format("File %s not found", arg[1]))
            os.exit(false)
        end
    else
        io.write("\nType the code you want to execute. input \"__stop__\" on a newline to finish:\n")
        local buffer = {}
        repeat
            local l = io.read()
            table.insert(buffer, l)
        until l == "__stop__"
        print("Stopped reading from the buffer!")
        return table.concat(buffer)
    end
end

local function find_p (tab, start)
    local open = 0
    for i = start, #tab + 1 do
        local val = tab[i]
        if val == "[" then open = open + 1
        elseif val == "]" then
            if open == 0 then return i end
            open = open - 1
        end
    end
    return nil
end

local function map_jumps (instructions)
    local check = 0
    for _, v in ipairs(instructions) do
        if v == "[" then check = check + 1
        elseif v == "]" then check = check - 1
        end
    end
    if check == 0 then
        local map = {}
        for i, v in ipairs(instructions) do
            if v == "[" then
                local matching = find_p(instructions, i + 1)
                if matching then
                    map[i] = matching
                    map[matching] = i
                end
            end
        end
        return map
    else return nil end
end

local function interpret (instructions)
    local jump_map = map_jumps(instructions)
    local ip = 1
    while ip <= #instructions do
        local op = instructions[ip]
        if op == ">" then p(1)
        elseif op == "<" then p(-1)
        elseif op == "+" then add(1)
        elseif op == "-" then add(-1)
        elseif op == "." then out()
        elseif op == "," then input()
        elseif op == "[" then
            if v() == 0 then
                ip = jump_map[ip]
            end
        elseif op == "]" then
            if v() ~= 0 then
                ip = jump_map[ip]
            end
        end
        ip = ip + 1
    end
end


local _code = read_brainfuckery()
local code = {}
for v in string.gmatch(_code, "[<>%.,%+%-%[%]]") do
    table.insert(code, v)
end
print("====================== S T A R T ======================")
interpret(code)
print("======================== E N D ========================")
print("Exiting...")